{"version":3,"file":"static/js/206.22546ddf.chunk.js","mappings":"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","sources":["components/QuotePage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Form,\n  Button,\n  Row,\n  Col,\n  Card,\n  Alert,\n} from \"react-bootstrap\";\nimport { ArrowRight } from \"react-bootstrap-icons\"; // A√±adido para consistencia si se usa en otro lugar\nimport \"./QuotePage.css\";\nimport cerco_stock from \"../assets/cerco_stock.webp\"; // Imagen gen√©rica\nimport cerco_190 from \"../assets/cerco-190.webp\"; // Imagen espec√≠fica para 1.90m\n\n// Data structure for fence components based on height\nconst FENCE_COMPONENTS_BY_HEIGHT = {\n  \"1.50m\": [\n    \"2 Placas de 50cm de alto\",\n    \"1 Placa de 30cm de alto\",\n    \"1 Barda (10cm de altura efectiva)\",\n  ],\n  \"1.90m\": [\n    \"3 Placas de 50cm de alto\",\n    \"1 Placa de 30cm de alto\",\n    \"1 Barda (10cm de altura efectiva)\",\n  ],\n  \"2.20m\": [\"üöß Proximamente\"],\n  Otra: [\n    \"Componentes para altura personalizada: Por favor, consulta con un asesor.\",\n  ],\n};\n\nconst QuotePage = () => {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    rut: \"\",\n    phone: \"\",\n    address: \"\",\n    email: \"\",\n    fenceHeight: \"1.90m\", // Default to 1.90m as it's the most detailed\n    fenceType: \"Cerco Vibrado Est√°ndar\",\n    linearMeters: \"\",\n    message: \"\",\n  });\n  const [validated, setValidated] = useState(false);\n  const [error, setError] = useState(null);\n  const [message, setMessage] = useState(null);\n  const [rutError, setRutError] = useState(null); // Nuevo estado para el error del RUT\n  const [componentsList, setComponentsList] = useState(\n    FENCE_COMPONENTS_BY_HEIGHT[formData.fenceHeight],\n  );\n\n  // useEffect para inicializar componentsList y actualizar la imagen al cargar el componente\n  useEffect(() => {\n    if (FENCE_COMPONENTS_BY_HEIGHT[formData.fenceHeight]) {\n      setComponentsList(FENCE_COMPONENTS_BY_HEIGHT[formData.fenceHeight]);\n    }\n  }, [formData.fenceHeight]); // Dependencia en formData.fenceHeight para actualizar al cambiar\n\n  // Funci√≥n para validar el RUT chileno\n  const validateRut = (rut) => {\n    if (!/^[0-9]+[kK0-9]$/.test(rut)) {\n      return false; // Formato b√°sico incorrecto\n    }\n\n    const rutClean = rut.slice(0, -1);\n    let dv = rut.slice(-1).toUpperCase();\n\n    let sum = 0;\n    let multiplier = 2;\n\n    for (let i = rutClean.length - 1; i >= 0; i--) {\n      sum += parseInt(rutClean[i], 10) * multiplier;\n      multiplier++;\n      if (multiplier > 7) {\n        multiplier = 2;\n      }\n    }\n\n    const remainder = sum % 11;\n    let calculatedDv = 11 - remainder;\n\n    if (calculatedDv === 11) {\n      calculatedDv = \"0\";\n    } else if (calculatedDv === 10) {\n      calculatedDv = \"K\";\n    } else {\n      calculatedDv = String(calculatedDv);\n    }\n\n    return calculatedDv === dv;\n  };\n\n  const formatRut = (value) => {\n    // Limpiar el RUT de caracteres no num√©ricos y puntos\n    let cleaned = value.replace(/[^0-9kK]/g, \"\");\n\n    // Limitar la longitud del RUT (ej. 9 d√≠gitos para el n√∫mero + 1 para el d√≠gito verificador)\n    if (cleaned.length > 9) {\n      cleaned = cleaned.slice(0, 9);\n    }\n\n    // Convertir a may√∫scula la K si existe\n    cleaned = cleaned.toUpperCase();\n\n    // Aplicar formato: XX.XXX.XXX-X\n    let formatted = \"\";\n    if (cleaned.length > 1) {\n      formatted = cleaned.slice(-1);\n      cleaned = cleaned.slice(0, -1);\n    }\n\n    while (cleaned.length > 3) {\n      formatted = \".\" + cleaned.slice(-3) + formatted;\n      cleaned = cleaned.slice(0, -3);\n    }\n\n    if (cleaned.length > 0) {\n      formatted = cleaned + formatted;\n    }\n\n    if (formatted.length > 0 && !formatted.includes(\"-\")) {\n      formatted = formatted.slice(0, -1) + \"-\" + formatted.slice(-1);\n    }\n\n    return formatted;\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    let newValue = value;\n\n    if (name === \"rut\") {\n      // Limpiar el RUT para validaci√≥n y formateo\n      const cleanRut = value.replace(/[^0-9kK]/g, \"\");\n      newValue = formatRut(value);\n\n      // Validar el RUT solo si tiene la longitud m√≠nima para ser v√°lido (ej. 7 d√≠gitos + DV)\n      if (cleanRut.length >= 7) {\n        if (!validateRut(cleanRut)) {\n          setRutError(\"El RUT ingresado no es v√°lido.\");\n        } else {\n          setRutError(null);\n        }\n      } else {\n        setRutError(null); // Limpiar error si el RUT es demasiado corto para validar\n      }\n    }\n\n    setFormData((prevState) => {\n      const newState = { ...prevState, [name]: newValue };\n      // Actualizar fenceType basado en fenceHeight\n      if (name === \"fenceHeight\") {\n        newState.fenceType =\n          value === \"Otra\"\n            ? \"Cerco Vibrado Personalizado\"\n            : `Cerco Vibrado ${value}`;\n        // Actualizar componentsList basado en la nueva altura\n        if (FENCE_COMPONENTS_BY_HEIGHT[value]) {\n          setComponentsList(FENCE_COMPONENTS_BY_HEIGHT[value]);\n        } else {\n          setComponentsList([]); // Limpiar si la altura no se encuentra\n        }\n      }\n      return newState;\n    });\n  };\n\n  const getImageForHeight = (height) => {\n    switch (height) {\n      case \"1.90m\":\n        return cerco_190;\n      default:\n        return cerco_stock; // Imagen por defecto para otras alturas\n    }\n  };\n\n  const handleSubmit = async (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Validar RUT antes de continuar con la validaci√≥n del formulario\n    if (rutError) {\n      setValidated(true);\n      setError(\"Por favor, corrige el RUT antes de enviar.\");\n      return;\n    }\n\n    if (form.checkValidity() === false) {\n      setValidated(true);\n      setError(\"Por favor, completa todos los campos obligatorios.\");\n      return;\n    }\n\n    setMessage(null);\n    setError(null);\n    setValidated(false); // Reset validation state on successful attempt\n\n    try {\n      const response = await fetch(\"http://localhost:5000/api/quotes\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(formData),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || \"Error al enviar la cotizaci√≥n\");\n      }\n\n      setMessage(\n        \"¬°Cotizaci√≥n enviada exitosamente! Nos pondremos en contacto contigo pronto.\",\n      );\n      setFormData({\n        name: \"\",\n        rut: \"\",\n        phone: \"\",\n        address: \"\",\n        email: \"\",\n        fenceHeight: \"1.50m\",\n        fenceType: \"Cerco Vibrado Est√°ndar\", // Resetear tambi√©n\n        linearMeters: \"\",\n        message: \"\",\n      });\n      setValidated(false); // Reset validation state on successful submission\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  return (\n    <section className=\"quote-page-section\">\n      <Container>\n        <Row className=\"justify-content-center\">\n          <Col md={8}>\n            <Card className=\"quote-card\">\n              <Card.Body>\n                <h2 className=\"text-center mb-4\">Solicita tu Cotizaci√≥n</h2>\n                <p className=\"text-center text-muted mb-4\">\n                  Completa el formulario y te enviaremos una cotizaci√≥n\n                  detallada a la brevedad.\n                </p>\n                {message && <Alert variant=\"success\">{message}</Alert>}\n                {error && <Alert variant=\"danger\">{error}</Alert>}\n                <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                  <Row>\n                    <Col md={6}>\n                      <Form.Group className=\"mb-3\" controlId=\"formName\">\n                        <Form.Label>Nombre Completo</Form.Label>\n                        <Form.Control\n                          type=\"text\"\n                          name=\"name\"\n                          value={formData.name}\n                          onChange={handleChange}\n                          required\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                          Por favor, ingresa tu nombre completo.\n                        </Form.Control.Feedback>\n                      </Form.Group>\n                    </Col>\n                    <Col md={6}>\n                      <Form.Group className=\"mb-3\" controlId=\"formRut\">\n                        <Form.Label>RUT</Form.Label>\n                        <Form.Control\n                          type=\"text\"\n                          name=\"rut\"\n                          value={formData.rut}\n                          onChange={handleChange}\n                          required\n                          isInvalid={!!rutError} // Marcar como inv√°lido si hay rutError\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                          {rutError || \"Por favor, ingresa un RUT v√°lido (ej. 12.345.678-9).\"}\n                        </Form.Control.Feedback>\n                      </Form.Group>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col md={6}>\n                      <Form.Group className=\"mb-3\" controlId=\"formPhone\">\n                        <Form.Label>N√∫mero de Tel√©fono</Form.Label>\n                        <Form.Control\n                          type=\"tel\"\n                          name=\"phone\"\n                          value={formData.phone}\n                          onChange={handleChange}\n                          required\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                          Por favor, ingresa tu n√∫mero de tel√©fono.\n                        </Form.Control.Feedback>\n                      </Form.Group>\n                    </Col>\n                    <Col md={6}>\n                      <Form.Group className=\"mb-3\" controlId=\"formEmail\">\n                        <Form.Label>Correo Electr√≥nico</Form.Label>\n                        <Form.Control\n                          type=\"email\"\n                          name=\"email\"\n                          value={formData.email}\n                          onChange={handleChange}\n                          required\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                          Por favor, ingresa un correo electr√≥nico v√°lido.\n                        </Form.Control.Feedback>\n                      </Form.Group>\n                    </Col>\n                  </Row>\n\n                  <Form.Group className=\"mb-3\" controlId=\"formAddress\">\n                    <Form.Label>Direcci√≥n / Comuna</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      name=\"address\"\n                      value={formData.address}\n                      onChange={handleChange}\n                      required\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                      Por favor, ingresa tu direcci√≥n o comuna.\n                    </Form.Control.Feedback>\n                  </Form.Group>\n\n                  <Row>\n                    <Col md={6}>\n                      <Form.Group className=\"mb-3\" controlId=\"formFenceHeight\">\n                        <Form.Label>Altura del Cerco</Form.Label>\n                        <Form.Select\n                          name=\"fenceHeight\"\n                          value={formData.fenceHeight}\n                          onChange={handleChange}\n                          required\n                        >\n                          <option value=\"\">Selecciona una altura</option>\n                          <option>1.50m</option>\n                          <option>1.90m</option>\n                          <option>2.20m</option>\n                          <option>Otra</option>\n                        </Form.Select>\n                        <Form.Control.Feedback type=\"invalid\">\n                          Por favor, selecciona la altura del cerco.\n                        </Form.Control.Feedback>\n                      </Form.Group>\n                    </Col>\n                    <Col md={6}>\n                      <Form.Group className=\"mb-3\" controlId=\"formLinearMeters\">\n                        <Form.Label>Metros Lineales (aprox.)</Form.Label>\n                        <Form.Control\n                          type=\"number\"\n                          name=\"linearMeters\"\n                          value={formData.linearMeters}\n                          onChange={handleChange}\n                          required\n                          min=\"1\"\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                          Por favor, ingresa los metros lineales.\n                        </Form.Control.Feedback>\n                      </Form.Group>\n                    </Col>\n                  </Row>\n\n                  <Form.Group className=\"mb-3\" controlId=\"formMessage\">\n                    <Form.Label>Mensaje Adicional</Form.Label>\n                    <Form.Control\n                      as=\"textarea\"\n                      name=\"message\"\n                      rows={4}\n                      value={formData.message}\n                      onChange={handleChange}\n                      placeholder=\"Ind√≠canos cualquier detalle importante para tu proyecto.\"\n                    />\n                  </Form.Group>\n\n                  {/* Secci√≥n de Componentes del Cerco */}\n                  {formData.fenceHeight && componentsList.length > 0 && (\n                    <Card className=\"mb-3 components-card\">\n                      <Card.Body>\n                        <Card.Title>\n                          Componentes para {formData.fenceHeight}\n                        </Card.Title>\n                        <ul>\n                          {componentsList.map((component, index) => (\n                            <li key={index}>{component}</li>\n                          ))}\n                        </ul>\n                      </Card.Body>\n                    </Card>\n                  )}\n\n                  <div className=\"d-grid\">\n                    <Button variant=\"primary\" type=\"submit\" size=\"lg\">\n                      Enviar Cotizaci√≥n\n                    </Button>\n                  </div>\n                </Form>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center mt-5\">\n          <Col md={8}>\n            <img\n              src={getImageForHeight(formData.fenceHeight)}\n              alt=\"Cerco de referencia\"\n              className=\"img-fluid rounded shadow-lg\"\n            />\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  );\n};\n\nexport default QuotePage;\n"],"names":["FENCE_COMPONENTS_BY_HEIGHT","Otra","QuotePage","formData","setFormData","useState","name","rut","phone","address","email","fenceHeight","fenceType","linearMeters","message","validated","setValidated","error","setError","setMessage","rutError","setRutError","componentsList","setComponentsList","useEffect","handleChange","e","value","target","newValue","cleanRut","replace","cleaned","length","slice","toUpperCase","formatted","includes","formatRut","test","rutClean","dv","sum","multiplier","i","parseInt","calculatedDv","String","validateRut","prevState","newState","_objectSpread","concat","_jsx","className","children","_jsxs","Container","Row","Col","md","Card","Body","Alert","variant","Form","noValidate","onSubmit","async","form","event","currentTarget","preventDefault","stopPropagation","checkValidity","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","Group","controlId","Label","Control","type","onChange","required","Feedback","isInvalid","Select","min","as","rows","placeholder","Title","map","component","index","Button","size","src","height","cerco_190","cerco_stock","alt"],"sourceRoot":""}