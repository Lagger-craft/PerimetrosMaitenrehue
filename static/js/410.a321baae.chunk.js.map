{"version":3,"file":"static/js/410.a321baae.chunk.js","mappings":"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","sources":["components/QuotePage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Container, Form, Button, Row, Col, Card, Alert } from 'react-bootstrap';\nimport './QuotePage.css';\n\nconst QuotePage = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    rut: '',\n    phone: '',\n    address: '',\n    email: '',\n    fenceHeight: '1.90m',\n    fenceType: 'Cerco Vibrado Estándar', // Nuevo campo\n    linearMeters: '',\n    message: '',\n  });\n  const [message, setMessage] = useState(null);\n  const [error, setError] = useState(null);\n  const [validated, setValidated] = useState(false); // Estado para validación de Bootstrap\n\n  const formatRut = (value) => {\n    // Limpiar el RUT de caracteres no numéricos y puntos\n    let cleaned = value.replace(/[^0-9kK]/g, '');\n\n    // Convertir a mayúscula la K si existe\n    cleaned = cleaned.toUpperCase();\n\n    // Aplicar formato: XX.XXX.XXX-X\n    let formatted = '';\n    if (cleaned.length > 1) {\n      formatted = cleaned.slice(-1);\n      cleaned = cleaned.slice(0, -1);\n    }\n\n    while (cleaned.length > 3) {\n      formatted = '.' + cleaned.slice(-3) + formatted;\n      cleaned = cleaned.slice(0, -3);\n    }\n\n    if (cleaned.length > 0) {\n      formatted = cleaned + formatted;\n    }\n\n    if (formatted.length > 0 && value.includes('-')) {\n      formatted = formatted.replace(/\\.(?=[0-9]{3}-)/g, ''); // Evitar doble punto antes del guion\n      formatted = formatted.replace(/-(?=[0-9]{3})/g, ''); // Evitar doble guion\n    }\n\n    if (formatted.length > 0 && !formatted.includes('-')) {\n      formatted = formatted.slice(0, -1) + '-' + formatted.slice(-1);\n    }\n\n    return formatted;\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    let newValue = value;\n\n    if (name === 'rut') {\n      newValue = formatRut(value);\n    }\n\n    setFormData(prevState => {\n      const newState = { ...prevState, [name]: newValue };\n      // Actualizar fenceType basado en fenceHeight\n      if (name === 'fenceHeight') {\n        newState.fenceType = value === 'Otra' ? 'Cerco Vibrado Personalizado' : `Cerco Vibrado ${value}`;\n      }\n      return newState;\n    });\n  };\n\n  const handleSubmit = async (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (form.checkValidity() === false) {\n      setValidated(true);\n      setError('Por favor, completa todos los campos obligatorios.');\n      return;\n    }\n\n    setMessage(null);\n    setError(null);\n    setValidated(false); // Reset validation state on successful attempt\n\n    try {\n      const response = await fetch('http://localhost:5000/api/quotes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Error al enviar la cotización');\n      }\n\n      setMessage('¡Cotización enviada exitosamente! Nos pondremos en contacto contigo pronto.');\n      setFormData({\n        name: '',\n        rut: '',\n        phone: '',\n        address: '',\n        email: '',\n        fenceHeight: '1.90m',\n        fenceType: 'Cerco Vibrado Estándar', // Resetear también\n        linearMeters: '',\n        message: '',\n      });\n      setValidated(false); // Reset validation state on successful submission\n\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  return (\n    <section className=\"quote-page-section\">\n      <Container>\n        <Row className=\"justify-content-center\">\n          <Col md={8}>\n            <Card className=\"quote-card\">\n              <Card.Body>\n                <h2 className=\"text-center mb-4\">Solicita tu Cotización</h2>\n                <p className=\"text-center text-muted mb-4\">\n                  Completa el formulario y te enviaremos una cotización detallada a la brevedad.\n                </p>\n                {message && <Alert variant=\"success\">{message}</Alert>}\n                {error && <Alert variant=\"danger\">{error}</Alert>}\n                <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                  <Row>\n                    <Col md={6}>\n                      <Form.Group className=\"mb-3\" controlId=\"formName\">\n                        <Form.Label>Nombre Completo</Form.Label>\n                        <Form.Control type=\"text\" name=\"name\" value={formData.name} onChange={handleChange} required />\n                        <Form.Control.Feedback type=\"invalid\">Por favor, ingresa tu nombre completo.</Form.Control.Feedback>\n                      </Form.Group>\n                    </Col>\n                    <Col md={6}>\n                      <Form.Group className=\"mb-3\" controlId=\"formRut\">\n                        <Form.Label>RUT</Form.Label>\n                        <Form.Control type=\"text\" name=\"rut\" value={formData.rut} onChange={handleChange} required pattern=\"^[0-9]{1,2}\\.[0-9]{3}\\.[0-9]{3}-[0-9kK]{1}$\" />\n                        <Form.Control.Feedback type=\"invalid\">Por favor, ingresa un RUT válido (ej. 12.345.678-9).</Form.Control.Feedback>\n                      </Form.Group>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col md={6}>\n                      <Form.Group className=\"mb-3\" controlId=\"formPhone\">\n                        <Form.Label>Número de Teléfono</Form.Label>\n                        <Form.Control type=\"tel\" name=\"phone\" value={formData.phone} onChange={handleChange} required />\n                        <Form.Control.Feedback type=\"invalid\">Por favor, ingresa tu número de teléfono.</Form.Control.Feedback>\n                      </Form.Group>\n                    </Col>\n                    <Col md={6}>\n                      <Form.Group className=\"mb-3\" controlId=\"formEmail\">\n                        <Form.Label>Correo Electrónico</Form.Label>\n                        <Form.Control type=\"email\" name=\"email\" value={formData.email} onChange={handleChange} required />\n                        <Form.Control.Feedback type=\"invalid\">Por favor, ingresa un correo electrónico válido.</Form.Control.Feedback>\n                      </Form.Group>\n                    </Col>\n                  </Row>\n\n                  <Form.Group className=\"mb-3\" controlId=\"formAddress\">\n                    <Form.Label>Dirección / Comuna</Form.Label>\n                    <Form.Control type=\"text\" name=\"address\" value={formData.address} onChange={handleChange} required />\n                    <Form.Control.Feedback type=\"invalid\">Por favor, ingresa tu dirección o comuna.</Form.Control.Feedback>\n                  </Form.Group>\n\n                  <Row>\n                    <Col md={6}>\n                      <Form.Group className=\"mb-3\" controlId=\"formFenceHeight\">\n                        <Form.Label>Altura del Cerco</Form.Label>\n                        <Form.Select name=\"fenceHeight\" value={formData.fenceHeight} onChange={handleChange} required>\n                          <option value=\"\">Selecciona una altura</option>\n                          <option>1.90m</option>\n                          <option>2.10m</option>\n                          <option>2.40m</option>\n                          <option>Otra</option>\n                        </Form.Select>\n                        <Form.Control.Feedback type=\"invalid\">Por favor, selecciona la altura del cerco.</Form.Control.Feedback>\n                      </Form.Group>\n                    </Col>\n                    <Col md={6}>\n                      <Form.Group className=\"mb-3\" controlId=\"formLinearMeters\">\n                        <Form.Label>Metros Lineales (aprox.)</Form.Label>\n                        <Form.Control type=\"number\" name=\"linearMeters\" value={formData.linearMeters} onChange={handleChange} required min=\"1\" />\n                        <Form.Control.Feedback type=\"invalid\">Por favor, ingresa los metros lineales.</Form.Control.Feedback>\n                      </Form.Group>\n                    </Col>\n                  </Row>\n\n                  <Form.Group className=\"mb-3\" controlId=\"formMessage\">\n                    <Form.Label>Mensaje Adicional</Form.Label>\n                    <Form.Control as=\"textarea\" name=\"message\" rows={4} value={formData.message} onChange={handleChange} placeholder=\"Indícanos cualquier detalle importante para tu proyecto.\" />\n                  </Form.Group>\n\n                  <div className=\"d-grid\">\n                    <Button variant=\"primary\" type=\"submit\" size=\"lg\">\n                      Enviar Cotización\n                    </Button>\n                  </div>\n                </Form>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  );\n};\n\nexport default QuotePage;\n"],"names":["QuotePage","formData","setFormData","useState","name","rut","phone","address","email","fenceHeight","fenceType","linearMeters","message","setMessage","error","setError","validated","setValidated","handleChange","e","value","target","newValue","cleaned","replace","toUpperCase","formatted","length","slice","includes","formatRut","prevState","newState","_objectSpread","concat","_jsx","className","children","Container","Row","Col","md","Card","_jsxs","Body","Alert","variant","Form","noValidate","onSubmit","async","form","event","currentTarget","preventDefault","stopPropagation","checkValidity","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","err","Group","controlId","Label","Control","type","onChange","required","Feedback","pattern","Select","min","as","rows","placeholder","Button","size"],"sourceRoot":""}